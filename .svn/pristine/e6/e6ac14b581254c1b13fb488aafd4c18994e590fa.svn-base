<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.aspire.birp.modules.antiPoverty.dao.FamilyFileDao">
		
		<sql id="y_sql">
				
				AND STAT_TIME=
					CASE
						WHEN to_number(#{YEAR}) = to_number(to_char(sysdate,'yyyy')) then to_number(#{TW_FAMILY_INCOME_MM})
						WHEN to_number(#{YEAR}) &lt; to_number(to_char(sysdate,'yyyy')) then to_number(#{YEAR}||'1201')
					END
		</sql>
		<sql id="m_sql">
		
			AND MONTH_OF_ACC=
					CASE
						WHEN to_number(#{YEAR}) = to_number(to_char(sysdate,'yyyy')) then  to_number(substr(#{TW_FAMILY_INCOME_MM},1,6))
						WHEN to_number(#{YEAR}) &lt; to_number(to_char(sysdate,'yyyy')) then  to_number(#{YEAR}||'12')
					END
			AND substr(MONTH_OF_ACC,1,4)=#{YEAR}		
				
		
		</sql>
		
		
		
		<select id="queryPerCapitaDisincomeChart"  parameterType="hashmap" resultType="hashmap">
				SELECT 
				TO_CHAR(TO_DATE(MONTH_OF_ACC,'yyyy-mm'),'yyyy.mm')  S_NAME,
				FAMILY_DPI_Y S_VALUE,
				'人均可支配收入(元)' S_GROUP
				FROM 
				TW_FAMILY_INCOME_M
				
				<where>
				   AND RESIDENCE_ID=#{FAM_ID}
				   AND SUBSTR(MONTH_OF_ACC,1,4)=#{YEAR}
				   <include refid="y_sql"/>
				</where>
				ORDER BY MONTH_OF_ACC 
			
		</select>
		
		<select id="queryPerCapitaDisincomeCharto"  parameterType="hashmap" resultType="ChartConfigBar">
			
				
				
				SELECT 
				TO_CHAR(TO_DATE(MONTH_OF_ACC,'yyyy-mm'),'yyyy.mm')  name,
				FAMILY_DPI_Y value,
				'人均可支配收入(元)' groups
				FROM 
				TW_FAMILY_INCOME_M
				
				<where>
				   AND RESIDENCE_ID=#{FAM_ID}
				   AND SUBSTR(MONTH_OF_ACC,1,4)=#{YEAR}
				   <include refid="y_sql"/>
				</where>
				ORDER BY MONTH_OF_ACC 
			
		</select>

		<select id="queryPerCapitaDisincomeCount"  parameterType="hashmap" resultType="hashmap">
			
		SELECT 
				Y_INCOME   S_TOTAL_INCOME, --总收入
				Y_EXPENSES S_TOTAL_EXPENSE, --总支出
				FAMILY_INCOME_Y S_DISPOSABLE_INCOME,--可支配收入
			 	FAMILY_DPI_Y S_YEAR_AVG_DISPOSABLE_INCOME --年人均可支配
				
				FROM
				TW_FAMILY_INCOME_M
				
				<where>
					AND RESIDENCE_ID=#{FAM_ID}
					
					<include refid="y_sql"/>
				<include refid="m_sql"/>
				</where>
					
		</select>
		
		<select id="queryPerCapitaDisincomeCounto"  parameterType="hashmap" resultType="FileIncomeData">
			
				SELECT 
				Y_INCOME   totalIncome, --总收入
				Y_EXPENSES totalExpense, --总支出
				FAMILY_INCOME_Y disposableIncome,--可支配收入
			 	FAMILY_DPI_Y yearAverageDisposableIncome --年人均可支配
				
				FROM
				TW_FAMILY_INCOME_M
				
				
				   
				<where>
					AND RESIDENCE_ID=#{FAM_ID}
					
					<include refid="y_sql"/>
				<include refid="m_sql"/>
				</where>
					
		</select>
		

		<select id="queryPerCapitaDisincomeTable"  parameterType="hashmap" resultType="hashmap">
	SELECT * FROM (

				SELECT  
				RESIDENCE_ID,
				1 S_SORT,
				TO_CHAR(TO_DATE(MONTH_OF_ACC,'yyyy-mm'),'yyyy')  || '年累计' S_TITLE,
				FAMILY_DPI_Y  S_AVERAGE_DISPOSABLE_INCOME,--人均可支配收入
				FAMILY_INCOME_Y S_FAMILY_DISPOSABLE_INCOME,--家庭可支配收入
				Y_INCOME S_TOTAL_INCOME ,--总收入
				SALARY_INCOME_Y  S_SALARY_INCOME, --年工资收入
				OPERATE_INCOME_Y S_PRODUCTION_INCOME,-- 生产经营性收入
				PROPERTY_INCOME_Y S_PROPERTY_INCOME,--财产性收入
				TRANSFER_INCOME_Y S_TRANSFERRED_INCOME,--转移性收入
				FAMILY_PLANNING_INCOME_Y S_BIRTH_SUBSIDY,--计划生育金
				BASIC_LIVING_INCOME_Y S_LOW_SUBSIDY,--低保金
				FIVE_GURANTEE_IMCOME_Y S_FIVE_SUBSIDY,--五保金
				PENSON_INS_INCOME_Y S_PENSION,--养老保险金
				ECOLOGY_COMP_INCOME_Y S_ENV_SUBSIDY,--生态补偿金
				BASIC_MED_INCOME_Y S_MEDICAL_INSURANCE,--基本医疗保险报销医疗费
				MED_SALVAGE_INCOME_Y S_MEDICAL_SUBSIDY,--医疗求助金
				OTHER_TRANS_INCOME_Y S_OTHER_TRANSFERRED_INCOME, --其他转移性收入
				Y_EXPENSES S_TOTAL_PAYMENT,--总支出
				OPERATE_EXPENSES_Y S_PRODUCTION_PAYMENT,--生产经营性支出
				TRANSFER_EXPENSES_Y S_TRANSFERRED_INCOME2,--转移性支出
				INCOME_TAX_Y S_INDIVIDUAL_INCOME_TAX,--个人所得税
				SOCIAL_EXPENSES_Y S_SOCIAL_SECURITY_PAYMENT,--社会保障支出
				SUPPORT_EXPENSES_Y S_ALIMONY,--赡养支出
				OTHER_TRANS_EXPENSES_Y S_OTHER_TRANSFERRED_PAYMENT,--其他转移性支出
				OVERLOAN_AMOUNT_Y S_UNPAID_LOAN--未偿还借贷款
				FROM 
				TW_FAMILY_INCOME_M
				
				
				<where>
					
						<include refid="y_sql"/>
						<include refid="m_sql"/>
				<!-- 	AND (MONTH_OF_ACC=201612 
					or MONTH_OF_ACC=201712 
					or MONTH_OF_ACC=201812 
					or MONTH_OF_ACC=to_number(substr(#{TW_FAMILY_INCOME_MM},1,6)))
				 -->
				</where>
				
				UNION ALL
				
				SELECT  
				RESIDENCE_ID,
				2 S_SORT,
				TO_CHAR(TO_DATE(MONTH_OF_ACC,'YYYY.MM'),'yyyy.mm') S_TITLE,  --标题
				
				FAMILY_DPI_Y  S_AVERAGE_DISPOSABLE_INCOME,--人均可支配收入
				FAMILY_INCOME_Y S_FAMILY_DISPOSABLE_INCOME,--家庭可支配收入
				Y_INCOME S_TOTAL_INCOME ,--总收入
				SALARY_INCOME_Y  S_SALARY_INCOME, --年工资收入
				OPERATE_INCOME_Y S_PRODUCTION_INCOME,-- 生产经营性收入
				PROPERTY_INCOME_Y S_PROPERTY_INCOME,--财产性收入
				TRANSFER_INCOME_Y S_TRANSFERRED_INCOME,--转移性收入
				FAMILY_PLANNING_INCOME_Y S_BIRTH_SUBSIDY,--计划生育金
				BASIC_LIVING_INCOME_Y S_LOW_SUBSIDY,--低保金
				FIVE_GURANTEE_IMCOME_Y S_FIVE_SUBSIDY,--五保金
				PENSON_INS_INCOME_Y S_PENSION,--养老保险金
				ECOLOGY_COMP_INCOME_Y S_ENV_SUBSIDY,--生态补偿金
				BASIC_MED_INCOME_Y S_MEDICAL_INSURANCE,--基本医疗保险报销医疗费
				MED_SALVAGE_INCOME_Y S_MEDICAL_SUBSIDY,--医疗求助金
				OTHER_TRANS_INCOME_Y S_OTHER_TRANSFERRED_INCOME, --其他转移性收入
				Y_EXPENSES S_TOTAL_PAYMENT,--总支出
				OPERATE_EXPENSES_Y S_PRODUCTION_PAYMENT,--生产经营性支出
				TRANSFER_EXPENSES_Y S_TRANSFERRED_INCOME2,--转移性支出
				INCOME_TAX_Y S_INDIVIDUAL_INCOME_TAX,--个人所得税
				SOCIAL_EXPENSES_Y S_SOCIAL_SECURITY_PAYMENT,--社会保障支出
				SUPPORT_EXPENSES_Y S_ALIMONY,--赡养支出
				OTHER_TRANS_EXPENSES_Y S_OTHER_TRANSFERRED_PAYMENT,--其他转移性支出
				OVERLOAN_AMOUNT_Y S_UNPAID_LOAN--未偿还借贷款
				FROM 
				TW_FAMILY_INCOME_M 
				
				<where>
					AND RESIDENCE_ID=#{FAM_ID}
					
					<include refid="y_sql"/>
				<!-- <include refid="m_sql"/> -->
				</where>
				
				)
				
				WHERE 
				RESIDENCE_ID=#{FAM_ID}
				ORDER BY S_SORT,S_TITLE DESC
		
		</select>

		<select id="queryPovertyMember"  parameterType="hashmap" resultType="hashmap">
			SELECT 
       (case when A.RELATIVE='0' then 90 else case when UPDATE_REASON=2 then 100 else TO_NUMBER(SUBSTR(A.RELATIVE,2,3)) +1 end end) SID
      ,A.MENEBER_NAME AS S_NAME
      ,CASE WHEN A.MEMBER_SEX=0 THEN '男' WHEN A.MEMBER_SEX=1 THEN '女' ELSE '未填写或其他' END AS S_SEX
      ,CASE WHEN A.IDENTITY_TYPE=1 THEN '身份证' WHEN A.IDENTITY_TYPE=2 THEN '无户籍' WHEN A.IDENTITY_TYPE=0 THEN '未先择' ELSE '其他' END AS S_CREDENTIAL_TYPE
      ,CASE WHEN LENGTH(A.IDENTITY_NO)=15  AND REGEXP_LIKE(SUBSTR(A.IDENTITY_NO,7,4),'^[0-9]+$') THEN TRUNC(TO_CHAR(SYSDATE,'YYYY')-1900-SUBSTR(A.IDENTITY_NO,7,2) + (TO_CHAR(SYSDATE,'MM')-SUBSTR(A.IDENTITY_NO,9 ,2))/12 ) 
            WHEN LENGTH(A.IDENTITY_NO)>=18 AND REGEXP_LIKE(SUBSTR(A.IDENTITY_NO,7,6),'^[0-9]+$') THEN TRUNC(TO_CHAR(SYSDATE,'YYYY')     -SUBSTR(A.IDENTITY_NO,7,4) + (TO_CHAR(SYSDATE,'MM')-SUBSTR(A.IDENTITY_NO,11,2))/12 )  
            END  AS S_AGE
      ,NVL(B.RELATIVE_NAME,'未填写') AS  S_RELATIONSHIP
      ,NVL(C.NATIONALITY_NAME,'未填写') AS S_NATIONALITY
      ,NVL(D.PROTICAL_NAME,'未填写') AS S_POLITICAL_AFFILIATION
      ,NVL(E.EDUCATION_NAME,'未填写') AS S_EDUCATION
      ,CASE WHEN A.IN_SCHOOL=1 THEN '在校' WHEN A.IN_SCHOOL=0 THEN '非在校' ELSE '未填写' END AS S_AT_SCHOOL
      ,NVL(F.HEALTH_STATUS_NAME,'未填写') AS S_HEALTH
      ,CASE WHEN A.WORK_ABILITY=1 THEN '劳动力' WHEN A.WORK_ABILITY=2 THEN '丧失劳动力' WHEN A.WORK_ABILITY=3 THEN '无劳动力' ELSE '未填写' END AS S_LABOR_CAPACITY
      ,NVL(G.WORK_STATUS_NAME,'未填写') AS S_WORK_STATUS
      ,NVL(A.WORK_YEARS,'未填写') AS  S_WORK_TIME
      ,CASE WHEN A.IN_ARMY=1 THEN '是' WHEN A.IN_ARMY=0 THEN '否' ELSE '未填写' END AS S_ACTIVE_SERVICE
      ,CASE WHEN A.HAVE_ILLNESS_INS=1 THEN '是' WHEN A.HAVE_ILLNESS_INS=0 THEN '否' ELSE '未填写' END AS S_SERIOUS_ILLNESS_INSURANCE
      ,CASE WHEN A.SKILL_SCHOOL_WILL=1 THEN '有意愿' WHEN A.SKILL_SCHOOL_WILL=0 THEN '无意愿' ELSE '未填写' END AS  S_TECHNICAL_SCHOOL_WILLING
      ,NVL(A.TRAINING_REQ,'未填写') AS S_TRAIN_NEED
      ,NVL(A.SKILL_INFO,'未填写') AS S_SKILL_STATUS
      ,NVL(A.WORK_WILL,'未填写') AS S_EMPLOYMENT_WILLING
      ,NVL(A.WORK_EXPECT,'未填写') AS  S_EMPLOYMENT_EXPECTATION
      ,CASE WHEN A.HAVE_EMPLOYEE_INS=1 THEN '是' WHEN A.HAVE_EMPLOYEE_INS=0 THEN '否' ELSE '未填写' END  AS S_STAFF_PENSION_INSURANCE
      ,CASE WHEN A.HAVE_COUNTRY_MED_INS=1 THEN '是' WHEN A.HAVE_COUNTRY_MED_INS=0 THEN '否' ELSE '未填写' END AS S_RESIDENT_MEDICAL_INSURANCE
      ,CASE WHEN A.HAVE_RESIDENT_INS=1 THEN '是' WHEN A.HAVE_RESIDENT_INS=0 THEN '否' ELSE '未填写' END  AS S_RESIDENT_PENSION_INSURANCE
      ,NVL(A.PENSON_LEVEL,'未填写') AS  S_PENSION_LEVEL
      ,A.UPDATE_REASON S_UPDATE_REASON
      ,DECODE(A.ADD_STATUS,1,'新生儿',2,'嫁入',3,'其他',4,'错误','未填写') S_ADD_STATUS
      ,DECODE(A.REDUCE_STATUS,1,'死亡',2,'嫁出',3,'出国定居',4,'出国定居',5,'其他',6,'错误','未填写') S_REDUCE_STATUS
      ,UPDATE_TIME S_UPDATE_TIME
      FROM TR_POVERTY_MEMBER_D A
      ,DIM_RELATIVE B 
      ,DIM_NATIONALITY C 
      ,DIM_PROTICAL  D 
      ,DIM_EDUCATION  E 
      ,DIM_HEALTH_STATUS F
      ,DIM_WORK_STATUS G
          
      WHERE A.FILE_TIME= #{TR_POVERTY_MEMBER_D}
      AND A.RELATIVE=B.RELATIVE(+)
      AND A.NATIONALITY=C.NATIONALITY(+) 
      AND A.PROTICAL=D.PROTICAL(+)
      AND A.EDUCATION=E.EDUCATION(+) 
      AND A.HEALTH_STATUS=F.HEALTH_STATUS(+) 
      AND A.WORK_STATUS=G.WORK_STATUS(+) 
      
      AND A.RESIDENCE_ID = #{FAM_ID}  <!--户ID-->
      ORDER BY 1

	</select>

<select id="queryPovertyMembero"  parameterType="hashmap" resultType="Member">
			SELECT 
			 TO_NUMBER(SUBSTR(A.RELATIVE,2,3)) +1 SID
			,A.MENEBER_NAME AS name
			,CASE WHEN A.MEMBER_SEX=0 THEN '男' WHEN A.MEMBER_SEX=1 THEN '女' ELSE '未填写或其他' END AS sex
			,CASE WHEN A.IDENTITY_TYPE=1 THEN '身份证' WHEN A.IDENTITY_TYPE=2 THEN '残疾证' WHEN A.IDENTITY_TYPE=3 THEN '中国人民解放军军官证' ELSE '其他' END AS credentialType
			,CASE WHEN LENGTH(A.IDENTITY_NO)=15  AND REGEXP_LIKE(SUBSTR(A.IDENTITY_NO,7,4),'^[0-9]+$') THEN TRUNC(TO_CHAR(SYSDATE,'YYYY')-1900-SUBSTR(A.IDENTITY_NO,7,2) + (TO_CHAR(SYSDATE,'MM')-SUBSTR(A.IDENTITY_NO,9 ,2))/12 ) 
			      WHEN LENGTH(A.IDENTITY_NO)>=18 AND REGEXP_LIKE(SUBSTR(A.IDENTITY_NO,7,6),'^[0-9]+$') THEN TRUNC(TO_CHAR(SYSDATE,'YYYY')     -SUBSTR(A.IDENTITY_NO,7,4) + (TO_CHAR(SYSDATE,'MM')-SUBSTR(A.IDENTITY_NO,11,2))/12 )  
			      END  AS age
			,NVL(B.RELATIVE_NAME,'未填写') AS  relationship
			,NVL(C.NATIONALITY_NAME,'未填写') AS nationality
			,NVL(D.PROTICAL_NAME,'未填写') AS politicalAffiliation
			,NVL(E.EDUCATION_NAME,'未填写') AS education
			,CASE WHEN A.IN_SCHOOL=1 THEN '在校' WHEN A.IN_SCHOOL=2 THEN '非在校' ELSE '未填写' END AS atSchool
			,NVL(F.HEALTH_STATUS_NAME,'未填写') AS health
			,CASE WHEN A.WORK_ABILITY=1 THEN '劳动力' WHEN A.WORK_ABILITY=2 THEN '丧失劳动力' WHEN A.WORK_ABILITY=3 THEN '无劳动力' ELSE '未填写' END AS laborCapacity
			,NVL(G.WORK_STATUS_NAME,'未填写') AS workStatus
			,NVL(A.WORK_YEARS,'未填写') AS  workTime
			,CASE WHEN A.IN_ARMY=1 THEN '是' WHEN A.IN_ARMY=0 THEN '否' ELSE '未填写' END AS activeService
			,CASE WHEN A.HAVE_ILLNESS_INS=1 THEN '是' WHEN A.HAVE_ILLNESS_INS=0 THEN '否' ELSE '未填写' END AS seriousIllnessInsurance
			,CASE WHEN A.SKILL_SCHOOL_WILL=1 THEN '有意愿' WHEN A.SKILL_SCHOOL_WILL=0 THEN '无意愿' ELSE '未填写' END AS  technicalSchoolWilling
			,NVL(A.TRAINING_REQ,'未填写') AS trainNeed
			,NVL(A.SKILL_INFO,'未填写') AS skillStatus
			,NVL(A.WORK_WILL,'未填写') AS employmentWilling
			,NVL(A.WORK_EXPECT,'未填写') AS  employmentExpectation
			,CASE WHEN A.HAVE_EMPLOYEE_INS=1 THEN '是' WHEN A.HAVE_EMPLOYEE_INS=0 THEN '否' ELSE '未填写' END  AS staffPensionInsurance
			,CASE WHEN A.HAVE_COUNTRY_MED_INS=1 THEN '是' WHEN A.HAVE_COUNTRY_MED_INS=0 THEN '否' ELSE '未填写' END AS residentMedicalInsurance
			,CASE WHEN A.HAVE_RESIDENT_INS=1 THEN '是' WHEN A.HAVE_RESIDENT_INS=0 THEN '否' ELSE '未填写' END  AS residentPensionInsurance
			,NVL(A.PENSON_LEVEL,'未填写') AS  pensionLevel
			
			FROM TR_POVERTY_MEMBER_D A
			,DIM_RELATIVE B 
			,DIM_NATIONALITY C 
			,DIM_PROTICAL  D 
			,DIM_EDUCATION  E 
			,DIM_HEALTH_STATUS F
			,DIM_WORK_STATUS G
			    
			WHERE A.FILE_TIME=#{TR_POVERTY_MEMBER_D} 
			AND A.RELATIVE=B.RELATIVE(+)
			AND A.NATIONALITY=C.NATIONALITY(+) 
			AND A.PROTICAL=D.PROTICAL(+)
			AND A.EDUCATION=E.EDUCATION(+) 
			AND A.HEALTH_STATUS=F.HEALTH_STATUS(+) 
			AND A.WORK_STATUS=G.WORK_STATUS(+) 
			
			AND A.RESIDENCE_ID =#{FAM_ID}<!--户ID-->
			ORDER BY 1
				
	
	</select>


	<!--家庭相册-->
	<select id="queryFamilyfileFamPic"  parameterType="hashmap" resultType="hashmap">
			 SELECT *
			  FROM  ((select FBI.FAM_NAME AS S_HOUSE_HOLDER_NAME, PATH, PATH_ZOOM, decode(PIC_TYPE,'3',1,3) num
			         from TR_PIC_FAMILY_D PF, F_FAMILYFILE_BASIC_INFO_D FBI
			        WHERE FBI.FAM_ID = PF.RESIDENCE_ID
			          AND PF.FILE_TIME = #{TR_PIC_FAMILY_D}
			          AND FBI.FAM_ID = #{FAM_ID})
			UNION  (select FBI.FAM_NAME AS S_HOUSE_HOLDER_NAME, PATH, PATH_ZOOM, decode(PIC_TYPE,'7',2,4) num
			         from TR_PIC_MEMBER_D PM, F_FAMILYFILE_BASIC_INFO_D FBI
			        WHERE FBI.FAM_ID = PM.RESIDENCE_ID
			          AND PM.FILE_TIME = #{TR_PIC_MEMBER_D}
			          AND FBI.FAM_ID = #{FAM_ID}))
			 ORDER BY num
	</select>
	
		<!--家庭相册-->
	<select id="queryFamilyfileFamPico"  parameterType="hashmap" resultType="Album">
			SELECT * FROM 
				(select
				FBI.FAM_NAME AS houseHolderName,
				PATH AS src,
				PATH_ZOOM ,
				1 num 
				
				from TR_PIC_FAMILY_D PF 
				, F_FAMILYFILE_BASIC_INFO_D FBI
				WHERE 
				FBI.FAM_ID=PF.RESIDENCE_ID
				AND PIC_TYPE='3'
				AND PF.FILE_TIME=#{TR_PIC_FAMILY_D}
				AND FBI.FAM_ID =#{FAM_ID} )
				
				UNION
				
				(select
				FBI.FAM_NAME AS houseHolderName,
				PATH AS src,
				PATH_ZOOM,
				2 num 
				from TR_PIC_MEMBER_D PM 
				, F_FAMILYFILE_BASIC_INFO_D FBI
				WHERE 
				FBI.FAM_ID=PM.RESIDENCE_ID
				AND PM.FILE_TIME=#{TR_PIC_MEMBER_D}
				AND PIC_TYPE='7'
				AND FBI.FAM_ID =#{FAM_ID} )
				
				UNION
				(select
				FBI.FAM_NAME AS houseHolderName,
				PATH AS src,
				PATH_ZOOM,
				3 num 
				from TR_PIC_FAMILY_D PF 
				, F_FAMILYFILE_BASIC_INFO_D FBI
				WHERE 
				FBI.FAM_ID=PF.RESIDENCE_ID
				AND PF.FILE_TIME=#{TR_PIC_FAMILY_D}
				AND PIC_TYPE!='3'
				AND FBI.FAM_ID =#{FAM_ID} )
				
				UNION
				(select
				FBI.FAM_NAME AS houseHolderName,
				PATH AS src,
				PATH_ZOOM ,
				4 num
				from TR_PIC_MEMBER_D PM 
				, F_FAMILYFILE_BASIC_INFO_D FBI
				WHERE 
				FBI.FAM_ID=PM.RESIDENCE_ID
				AND PIC_TYPE!='7'
				AND PM.FILE_TIME=#{TR_PIC_MEMBER_D}
				AND FBI.FAM_ID =#{FAM_ID} )
				
				ORDER BY num	
	</select>



	<!--脱贫轨迹图表-->
	<select id="queryFamilyfileChart"  parameterType="hashmap" resultType="hashmap">
			SELECT
			TO_CHAR(TO_DATE(MONTH_TAG,'YYYY-MM-DD') ,'YYYY.MM' ) AS S_NAME,
			'综合得分' AS S_GROUP,
			ROUND(SUM(TOTAL_SCORE),2) AS S_TOTAL_SCORE
			FROM
			F_FAMILYFILE_AID_TRAIL_D
			
			WHERE FAM_ID =#{FAM_ID}
			AND TO_CHAR(TO_DATE(MONTH_TAG,'YYYY-MM-DD') ,'YYYY') = #{YEAR}
			AND MONTH_TAG IS NOT NULL 
			
			GROUP BY MONTH_TAG
			
			ORDER BY MONTH_TAG

	</select>
	
	<!--脱贫轨迹图表-->
	<select id="queryFamilyfileCharto"  parameterType="hashmap" resultType="ChartConfigBar">
			SELECT
			TO_CHAR(TO_DATE(MONTH_TAG,'YYYY-MM-DD') ,'YYYY.MM' ) AS name,
			'综合得分' AS groups,
			ROUND(SUM(TOTAL_SCORE),2) AS value
			FROM
			F_FAMILYFILE_AID_TRAIL_D
			
			WHERE FAM_ID =#{FAM_ID}
			
			AND MONTH_TAG IS NOT NULL 
			
			GROUP BY MONTH_TAG
			
			ORDER BY MONTH_TAG

	</select>
	
	<!--脱贫轨迹 -->
	<select id="queryFamilyfileAidTrail"  parameterType="hashmap" resultType="hashmap">
				SELECT
				FAM_PROPERTY,<!--户属性-->

				(FAM_DPI || '元') FAM_DPI , <!--家庭人均可支配收入值-->
				(FAM_DPI_TARGET || '元') FAM_DPI_TARGET, <!--家庭人均可支配收入目标值-->
				FAM_DPI_SCORE,<!--家庭人均可支配收入得分-->
				CASE WHEN FAM_DPI >= FAM_DPI_TARGET THEN 1
				ELSE 0 END  AS FAM_HAS_ACHIEVED,<!--家庭是否达标-->

				CASE  BASIC_LIVING
				when 1 THEN '达标'
				ELSE '未达标' END  AS BASIC_LIVING,<!--低保五保政策落实值-->
				'达标'  AS BASIC_TARGET, <!--低保五保政策落目标值-->
				BASIC_LIVING_SCORE,  <!--低保五保政策落实得分-->
				CASE  BASIC_LIVING
				when 1 THEN 1
				ELSE 0 END  AS BASIC_HAS_ACHIEVED,<!--低保五保是否达标-->

				(EDUCATION*100)|| '%' EDUCATION,<!--义务教育值-->
				(EDUCATION_TARGET*100) || '%' EDUCATION_TARGET,<!--义务教育目标值 93%-->
				EDUCATION_SCORE,<!--义务教育得分-->
				CASE WHEN EDUCATION >= EDUCATION_TARGET THEN 1
				ELSE 0 END  AS EDUCATION_HAS_ACHIEVED,

				(SOCIAL*100)|| '%' SOCIAL,<!--社会保障值-->
				SOCIAL_SCORE,<!--社会保障得分-->
				100 || '%'  as SOCIAL_TARGET, <!--义务教育目标值 93%-->
				CASE WHEN SOCIAL >= 1 THEN 1
				ELSE 0 END  AS SOCIAL_HAS_ACHIEVED,


				CASE  HOUSE
				when 1 THEN '达标'
				ELSE '未达标' END  AS HOUSE,<!--住房保障值-->

				'达标'  AS HOUSE_TARGET,<!--住房目标值-->
				HOUSE_SCORE,   <!--住房保障得分-->
				CASE  HOUSE
				when 1 THEN 1
				ELSE 0 END  AS HOUSE_HAS_ACHIEVED,<!--是否达标-->

				(MEDICAL*100)  || '%'  MEDICAL,<!--医疗保障值-->
				TRUNC(MEDICAL_SCORE,2)   MEDICAL_SCORE,<!--医疗保障得分-->
				100 || '%' as MEDICAL_TARGET, <!--医疗目标值-->
				CASE WHEN MEDICAL >= 1 THEN 1
				ELSE 0 END  AS MEDICAL_HAS_ACHIEVED,

				CASE  HELP_FAM
				when 1 THEN '达标'
				ELSE '未达标' END  AS HELP_FAM,<!--帮扶到户值-->
				'达标'  AS HELP_FAM_TARGET,
				HELP_FAM_SCORE, <!--帮扶到户得分-->
				CASE  HELP_FAM 
				WHEN 1 THEN 1 
				ELSE 0 END  AS HELP_FAM_HAS_ACHIEVED<!--帮扶到户得分-->

				FROM F_FAMILYFILE_AID_TRAIL_D

				WHERE FAM_ID =#{FAM_ID}
				AND MONTH_TAG=#{MONTH_TAG}

	</select>






	<!--资金投入  每月资金列表-->
	<select id="queryCapitalList"  parameterType="hashmap" resultType="hashmap">
		SELECT
		FC.FAM_ID AS S_FAM_ID,
		TO_CHAR (
			TO_DATE (
				FC.PROJ_INVEST_MONTH,
				'YYYY-MM'
			),
			'YYYY.MM'
		) AS S_TITLE,
		FC.OWN_CAPITAL AS S_ORGANIZATION,
		FC.HC_CITY AS S_helper_CITY_FINANCE,
		FC.HC_TOWN AS S_DISTRICT_TOWN_FINANCE,
		FC.HC_SOCIETY AS S_helper_SOCIAL_MONEY,
		FC.CNP_CENTER AS S_CENTRAL_FINANCE,
		FC.CNP_PROVINCE AS S_PROVINCE_FINANCE,
		FC.CNP_CENTER_INDUSTRY AS S_CENTRAL_INDUSTRY,
		FC.CNP_PROVINCE_INDUSTRY AS S_PROVINCE_INDUSTRY,
		FC.CNP_SOCIETY AS S_central_SOCIAL_MONEY,
		FC.BHC_CITY AS S_helped_CITY_FINANCE,
		FC.BHC_TOWN AS S_COUNTY_TOWN_FINANCE,
		FC.BHC_CITY_INDUSTRY AS S_CITY_INDUSTRY,
		FC.BHC_TOWN_INDUSTRY AS S_COUNTY_TOWN_INDUSTRY,
		FC.BHC_SOCIETY AS S_HELPED_SOCIAL_MONEY,
		ROUND (
				(
					OWN_CAPITAL +  HC_CITY +  HC_TOWN +  HC_SOCIETY +  CNP_CENTER + CNP_PROVINCE +  CNP_CENTER_INDUSTRY +  CNP_PROVINCE_INDUSTRY +CNP_SOCIETY +  BHC_CITY +  BHC_TOWN +  BHC_CITY_INDUSTRY +  BHC_TOWN_INDUSTRY+  BHC_SOCIETY
				),
				2
			) AS S_SUMMARY
		FROM
			F_FAMILYFILE_CAPITAL_D fc	
		WHERE
		FC.FAM_ID =#{FAM_ID}
		AND SUBSTR(PROJ_INVEST_MONTH,1,4)=#{YEAR}
		<if test=" null !=F_FAMILYFILE_CAPITAL_D  and  '' != F_FAMILYFILE_CAPITAL_D ">
				 AND FC.STAT_TIME  =#{F_FAMILYFILE_CAPITAL_D}
			</if>
		ORDER BY
			FC.PROJ_INVEST_MONTH DESC
		
		
	</select>





	<!--当年资金汇总列表-->
	<select id="queryCapitalListByYear"  parameterType="hashmap" resultType="hashmap">
		SELECT
			SUM (OWN_CAPITAL) AS S_ORGANIZATION,
			SUM (HC_CITY) AS S_HELPER_CITY_FINANCE,
			SUM (HC_TOWN) AS S_DISTRICT_TOWN_FINANCE,
			SUM (HC_SOCIETY) AS S_HELPER_SOCIAL_MONEY,
			SUM (CNP_CENTER) AS S_CENTRAL_FINANCE,
			SUM (CNP_PROVINCE) AS S_PROVINCE_FINANCE,
			SUM (CNP_CENTER_INDUSTRY) AS S_CENTRAL_INDUSTRY,
			SUM (CNP_PROVINCE_INDUSTRY) AS S_PROVINCE_INDUSTRY,
			SUM (CNP_SOCIETY) AS S_CENTRAL_SOCIAL_MONEY,
			SUM (BHC_CITY) AS S_HELPED_CITY_FINANCE,
			SUM (BHC_TOWN) AS S_COUNTY_TOWN_FINANCE,
			SUM (BHC_CITY_INDUSTRY) AS S_CITY_INDUSTRY,
			SUM (BHC_TOWN_INDUSTRY) AS S_COUNTY_TOWN_INDUSTRY,
			SUM (BHC_SOCIETY) AS S_HELPED_SOCIAL_MONEY,
			ROUND (
			(
				SUM (OWN_CAPITAL) + SUM (HC_CITY) + SUM (HC_TOWN) + SUM (HC_SOCIETY) + SUM (CNP_CENTER) + SUM (CNP_PROVINCE) + SUM (CNP_CENTER_INDUSTRY) + SUM (CNP_PROVINCE_INDUSTRY) + SUM (CNP_SOCIETY) + SUM (BHC_CITY) + SUM (BHC_TOWN) + SUM (BHC_CITY_INDUSTRY) + SUM (BHC_TOWN_INDUSTRY) + SUM (BHC_SOCIETY)
			),2) AS S_SUMMARY
		FROM F_FAMILYFILE_CAPITAL_D FC
		where
		FC.FAM_ID=#{FAM_ID}
		
		<if test=" null !=F_FAMILYFILE_CAPITAL_D  and  '' != F_FAMILYFILE_CAPITAL_D ">
					 AND FC.STAT_TIME  =#{F_FAMILYFILE_CAPITAL_D}
		</if>
		
		<if test="null != START_MONTH  and ''!= START_MONTH  and null !=END_MONTH and '' !=END_MONTH">
					AND  PROJ_INVEST_MONTH BETWEEN #{START_MONTH} AND #{END_MONTH}
		</if>
		GROUP BY
			FAM_ID
		
	</select>



	<!--资金投入 当年累计到户-->
	<select id="queryCapitalCount"  parameterType="hashmap" resultType="hashmap">
		SELECT
		ROUND(
		(SUM(OWN_CAPITAL) +
		SUM(HC_CITY) +
		SUM(HC_TOWN) +
		SUM(HC_SOCIETY) +
		SUM(CNP_CENTER) +
		SUM(CNP_PROVINCE) +
		SUM(CNP_CENTER_INDUSTRY) +
		SUM(CNP_PROVINCE_INDUSTRY) +
		SUM(CNP_SOCIETY) +
		SUM(BHC_CITY) +
		SUM(BHC_TOWN) +
		SUM(BHC_CITY_INDUSTRY) +
		SUM(BHC_TOWN_INDUSTRY) +
		SUM(BHC_SOCIETY) )/10000,2) AS S_TOTAL
		FROM F_FAMILYFILE_CAPITAL_D FC
		WHERE  FC.FAM_ID=#{FAM_ID}
		<if test=" null !=F_FAMILYFILE_CAPITAL_D  and  '' != F_FAMILYFILE_CAPITAL_D ">
			AND FC.STAT_TIME  =#{F_FAMILYFILE_CAPITAL_D}
		</if>
		<if test="null != START_MONTH  and ''!= START_MONTH  and null !=END_MONTH and '' !=END_MONTH">
					AND  PROJ_INVEST_MONTH BETWEEN #{START_MONTH} AND #{END_MONTH}
				</if>
		GROUP BY FAM_ID
		
	</select>
	
	
	
	<!--资金投入  累计到户-->
	<select id="queryCapitalTotalCount"  parameterType="hashmap" resultType="hashmap">
	
		
		SELECT
		ROUND(
		(SUM(OWN_CAPITAL) +
		SUM(HC_CITY) +
		SUM(HC_TOWN) +
		SUM(HC_SOCIETY) +
		SUM(CNP_CENTER) +
		SUM(CNP_PROVINCE) +
		SUM(CNP_CENTER_INDUSTRY) +
		SUM(CNP_PROVINCE_INDUSTRY) +
		SUM(CNP_SOCIETY) +
		SUM(BHC_CITY) +
		SUM(BHC_TOWN) +
		SUM(BHC_CITY_INDUSTRY) +
		SUM(BHC_TOWN_INDUSTRY) +
		SUM(BHC_SOCIETY) )/10000,2) AS S_TOTAL
		FROM F_FAMILYFILE_CAPITAL_D FC
		WHERE  FC.FAM_ID=#{FAM_ID}
		<if test=" null !=F_FAMILYFILE_CAPITAL_D  and  '' != F_FAMILYFILE_CAPITAL_D ">
			AND STAT_TIME  =#{F_FAMILYFILE_CAPITAL_D} 
		</if>
		GROUP BY FAM_ID
	</select>



	<!--帮扶动态详情-->
	<select id="queryFamilyFileTrendsPicById"  parameterType="hashmap" resultType="hashmap">
		
		
		select p.PATH
		
	 	from TR_PIC_HELP_FAMILY_TRENDS_D p ,F_FAMILYFILE_HELP_TRENDS_D t
		
		WHERE  t.HELP_ID=#{HELP_ID} 
		
		AND p.HELP_TRENDS_ID = t.HELP_ID
		
		AND p.FILE_TIME=#{TR_PIC_HELP_FAMILY_TRENDS_D}
		
	</select>


	<!--帮扶动态详情-->
	<select id="queryFamilyFileTrendsById"  parameterType="hashmap" resultType="hashmap">
		
		SELECT
		HELP_ID AS S_ID,
		TO_CHAR(TO_DATE(STAT_TIME,'YYYY-MM-DD') ,'YYYY/MM/DD') AS S_TIME,
		case when  length(SUBSTR(HELP_DESC,0,90))>=90 then SUBSTR(HELP_DESC,0,90) || '...'
			else HELP_DESC
		end  AS S_DESC
		FROM
		F_FAMILYFILE_HELP_TRENDS_D 
		
		WHERE  HELP_ID=#{HELP_ID}

		ORDER BY STAT_TIME DESC
	</select>


<!--帮扶动态详情-->
	<select id="queryFamilyFileTrendsByIdo"  parameterType="hashmap" resultType="News">
		
		SELECT
		HELP_ID AS id,
		TO_CHAR(TO_DATE(STAT_TIME,'YYYY-MM-DD') ,'YYYY/MM/DD') AS time,
		case when  length(SUBSTR(HELP_DESC,0,90))>=90 then SUBSTR(HELP_DESC,0,90) || '...'
			else HELP_DESC
		end  AS descs
		FROM
		F_FAMILYFILE_HELP_TRENDS_D 
		
		WHERE  HELP_ID=#{HELP_ID}

		ORDER BY STAT_TIME DESC
	</select>



	<!--帮扶动态列表-->
	<select id="queryFamilyFileTrends"  parameterType="hashmap" resultType="hashmap">
			
			SELECT
			HELP_ID AS S_ID,
			TO_CHAR(TO_DATE(STAT_TIME,'YYYY-MM-DD') ,'YYYY/MM/DD')
			AS S_TIME,
			replace((select wmsys.wm_concat(t.path)
		    from TR_PIC_HELP_FAMILY_TRENDS_D t where t.HELP_TRENDS_ID=HELP_ID AND FILE_TIME=#{TR_PIC_HELP_FAMILY_TRENDS_D}
		    group by t.HELP_TRENDS_ID),',',';') AS S_PICS,
			case when  length(SUBSTR(HELP_DESC,0,90))>=90 then SUBSTR(HELP_DESC,0,90) || '...'
			else HELP_DESC
			end  AS S_DESC
			FROM
			F_FAMILYFILE_HELP_TRENDS_D 
			
			WHERE FAM_ID =#{FAM_ID}
			
			<if test="null != STAT_TIME and  '' != STAT_TIME  ">
				AND STAT_TIME = #{STAT_TIME}
			</if>
			ORDER BY STAT_TIME DESC
	</select>
	
	<!--帮扶动态列表-->
	<select id="queryFamilyFileTrendso"  parameterType="hashmap" resultType="News">
			
			SELECT
			HELP_ID AS id,
			TO_CHAR(TO_DATE(STAT_TIME,'YYYY-MM-DD') ,'YYYY/MM/DD')
			AS time,
			replace((select wmsys.wm_concat(t.path)
		    from TR_PIC_HELP_FAMILY_TRENDS_D t where t.HELP_TRENDS_ID=HELP_ID AND FILE_TIME=#{TR_PIC_HELP_FAMILY_TRENDS_D}
		    group by t.HELP_TRENDS_ID),',',';') AS pics,
			case when  length(SUBSTR(HELP_DESC,0,90))>=90 then SUBSTR(HELP_DESC,0,90) || '...'
			else HELP_DESC
			end  AS descs
			FROM
			F_FAMILYFILE_HELP_TRENDS_D 
			
			WHERE FAM_ID =#{FAM_ID}
			
			<if test="null != STAT_TIME and  '' != STAT_TIME  ">
				AND STAT_TIME = #{STAT_TIME}
			</if>
			ORDER BY STAT_TIME DESC
	</select>

	<!--业务办理-->
	<select id="queryBusiProcessList"  parameterType="hashmap" resultType="hashmap">
		SELECT
		ADDR_LINK AS S_LINK ,
		ITEM_NAME AS  S_TEXT,
		FAM_ID AS S_FAM_ID
		FROM F_FAMILYFILE_BUSI_PROCESS_D FFBPD
		WHERE FFBPD.FAM_ID=#{FAM_ID}
		<if test="PROCESS_STATUS != null and PROCESS_STATUS != '' ">
			AND FFBPD.PROCESS_STATUS LIKE concat(#{PROCESS_STATUS},'%')
		</if>
	</select>
	
	<!--业务办理-->
	<select id="queryBusiProcessListo"  parameterType="hashmap" resultType="TextLink">
		SELECT
		ADDR_LINK AS link ,
		ITEM_NAME AS  text,
		FAM_ID AS famId
		FROM F_FAMILYFILE_BUSI_PROCESS_D FFBPD
		WHERE FFBPD.FAM_ID=#{FAM_ID}
		<if test="PROCESS_STATUS != null and PROCESS_STATUS != '' ">
			AND FFBPD.PROCESS_STATUS LIKE concat(#{PROCESS_STATUS},'%')
		</if>
	</select>

   <!--改进后的业务办理-->
	<select id="queryBusiProcessListNew"  parameterType="hashmap" resultType="baseListMode">
		SELECT
		ADDR_LINK AS S_LINK ,
		ITEM_NAME AS  S_TEXT,
		FAM_ID AS S_FAM_ID
		FROM F_FAMILYFILE_BUSI_PROCESS_D FFBPD
		WHERE FFBPD.FAM_ID=#{FAM_ID}
		<if test="PROCESS_STATUS != null and PROCESS_STATUS != '' ">
			AND FFBPD.PROCESS_STATUS LIKE concat(#{PROCESS_STATUS},'%')
		</if>
	</select>
	<!--帮扶施策图片列表  -->
	<select id="queryFamilyFileHelpPic"  parameterType="hashmap" resultType="hashmap">
		select 
		PATH
		from TR_PIC_FAMILY_PROJECT_D
		WHERE 
		PROJ_ID =#{PROJ_ID}
		AND PIC_TYPE=#{PIC_TYPE}
		AND FILE_TIME=#{TR_PIC_FAMILY_PROJECT_D}
		AND rownum=1
	</select>

	<!--帮扶策划列表-->
	<select id="queryFamilyFileMethodList"  parameterType="hashmap" resultType="hashmap">
		SELECT
		FHM.PROJ_ID AS S_PROJ_ID,
		FHM.HELP_CLASS AS S_TYPE,
		FHM.PROJ_OBJECT AS S_OBJECT,
		FHM.PROJ_NAME AS S_NAME,
		FHM.PROJ_CNT AS S_AMOUNT,
		FHM.PLAN_CAPITAL AS  S_INVEST_EXPECTED,
		FHM.REAL_CAPITAL AS  S_INVEST_ACTUAL,
		FHM.PROJ_PROFIT AS  S_PROFIT,
		FHM.PROJ_STATUS AS  S_STATUS,
		FHM.BEGIN_TIME AS S_TIME_START,
		FHM.FINISH_TIME AS  S_TIME_COMPLETED
		
		FROM
		F_FAMILYFILE_HELP_METHOD_D FHM
		WHERE FAM_ID=#{FAM_ID}
		AND substr(BEGIN_TIME,1,4)=#{YEAR}
		
	</select>
	<!--帮扶策划汇总-->
	<select id="queryFamilyFileMethodCount"  parameterType="hashmap" resultType="hashmap">
		
		SELECT
		COUNT(PROJ_ID)  AS S_TOTAL,
		COUNT(case when PROJ_STATUS = '完成' then  1
           else null end ) S_COMPLETED,
        COUNT(case when PROJ_STATUS = '进行中' then  1
           else null end ) S_RUNNING,
		ROUND(SUM(REAL_CAPITAL)/10000,2) AS S_INVESTED,
		case when SUM(PROJ_PROFIT) =0 then 0
		else ROUND(SUM(PROJ_PROFIT)/10000,2) end  S_PROFIT, 
		ROUND(SUM(PLAN_CAPITAL)/10000,2) S_INVEST_EXPECTED
		FROM
		F_FAMILYFILE_HELP_METHOD_D A
		WHERE FAM_ID=#{FAM_ID}
		AND substr(BEGIN_TIME,1,4)=#{YEAR}
		GROUP BY FAM_ID
	</select>

	<!--帮扶计划-->
	<select id="queryFamilyFilePlan"  parameterType="hashmap" resultType="hashmap">
			SELECT
				FHP.FAM_ID S_FAM_ID,
				FHP.FAM_NAME AS S_CHOUSE_HOLDER_SIGN,
				FHP.LEADER_NAME AS S_COUNTRY_LEADER_SIGN,
				FHP.PLAN_MAKE_TIME AS S_TIME,
				FHP.PLAN_CONTENT AS S_CONTENT,
				FHP.PLAN_YEAR AS  S_PLAN_YEAR
			FROM
				F_FAMILYFILE_HELP_PLAN_D FHP
			WHERE
				FHP.FAM_ID =#{FAM_ID}

			<if test="PLAN_YEAR != null and PLAN_YEAR != '' ">
				AND PLAN_YEAR IN

				<foreach collection="PLAN_YEAR" open="(" close=")" separator="," item="item">
					#{item}
				</foreach>

			</if>
			ORDER BY FHP.PLAN_YEAR
	</select>

	<!--帮扶计划-->
	<select id="queryFamilyFilePlano"  parameterType="hashmap" resultType="Plan">
			SELECT
				FHP.FAM_ID famId,
				FHP.FAM_NAME AS countryLeaderSign,
				FHP.LEADER_NAME AS houseHolderSign,
				FHP.PLAN_MAKE_TIME AS time,
				FHP.PLAN_CONTENT AS content
			FROM
				F_FAMILYFILE_HELP_PLAN_D FHP
			WHERE
				FHP.FAM_ID =#{FAM_ID}

			<if test="PLAN_YEAR != null and PLAN_YEAR != '' ">
				AND PLAN_YEAR IN

				<foreach collection="PLAN_YEAR" open="(" close=")" separator="," item="item">
					#{item}
				</foreach>

			</if>
			ORDER BY FHP.PLAN_YEAR
	</select>
	<!--生活条件-->
	<select id="queryFamilyFileCond"  parameterType="hashmap" resultType="hashmap">
			SELECT
			FBI.FAM_ID AS S_FAM_ID,
			FBI.PLANTATION_AREA AS S_TOTAL1,
			FBI.VALID_PLANTATION_AREA AS S_AVAILABLE,
			FBI.FOREAST_AREA AS S_TOTAL2,
			FBI.BACK_FOREAST_AREA AS S_RETURN,
			FBI.FRUIT_AREA AS S_FRUIT,
			FBI.GRASSLAND_AREA AS S_GRASS_TOTAL,
			FBI.WATER_AREA AS S_WATER_TOTAL,
			FBI.HAVE_ELEC AS S_PRODUCTION_ELECTRICITY,
			FBI.HAVE_PRODUCT_ELEC AS S_LIVING_ELECTRICITY,
			FBI.DRINK_SAFETY AS S_WATER_SAFETY,
			FBI.HOUSE_AREA AS S_HOUSE_AREA,
			to_number(FBI.MAIN_ROAD_DIS) AS S_DISTANCE_MAIN_ROAD,
			FBI.HOUSE_ROAD_KIND AS S_ROAD_TYPE,
			FBI.MAIN_FUEL AS S_FUEL_TYPE,
			FBI.HAVE_WC AS S_TOILET,
			FBI.JOIN_FARMER_COP AS S_JOINED_FSC
			FROM
			F_FAMILYFILE_BASIC_INFO_D FBI
			WHERE  FBI.FAM_ID=#{FAM_ID}
	</select>

	<!--户档案基本信息-->
	<select id="queryFamilyFileInfo"  parameterType="hashmap" resultType="hashmap">
			SELECT
			FBI.FAM_ID AS S_FAM_ID,
	FBI.FAM_NAME AS S_HOUSE_HOLDER_NAME,
	(
		SELECT
			PATH
		FROM
			TR_PIC_FAMILY_D
		WHERE
			PIC_TYPE = 3
		AND ROWNUM = 1
		AND FILE_TIME =#{TR_PIC_FAMILY_D}
		AND RESIDENCE_ID = FBI.FAM_ID
	) AS S_HOUSE_HOLDER_AVATAR,
	FBI.FAM_TEL AS S_HOUSE_HOLDER_PHONE,
	FBI.POOR_PROPERTY_DESC AS S_POOR_ATTRIBUTE,
	FBI.MAIN_POOR_REASON AS S_POOR_REASON,
	CONCAT (FBI.INCOME, '元') AS S_START_INCOME,
	NVL(FBI.TEAM_LEADER,'-') AS S_COUNTRY_LEADER_NAME,
	NVL(FBI.TEAM_LEADER_TEL,'-') AS S_COUNTRY_LEADER_PHONE,
	NVL(FBI.HELP_BEGIN_TIME ,'-')AS S_COUNTRY_LEADER_START_TIME,
(
		SELECT
			PATH
		FROM
			TR_PIC_HELP_CADRE_D
		WHERE
			PERSON_ID = FBI.TEAM_LEADER_ID
			AND nvl(PIC_TYPE,'1') = '1'
			AND ROWNUM = 1
		AND FILE_TIME =#{TR_PIC_HELP_CADRE_D}
	) AS S_COUNTRY_LEADER_AVATAR,
	NVL(FBI.HELP_UNIT_NAME,'-') AS S_COUNTRY_LEADER_ORG,
	NVL (FBI.REAL_EDU_MEMBER_CNT, 0) AS S_EDU,
	TRUNC (MEDICAL * 100, 1) AS S_MEDICAL_SECURITY,
	FBI.DPI AS S_INCOME,
	FBI.REAL_EDU_MEMBER_CNT AS S_EDU_ACHIEVED,
	FBI.NEED_EDU_MEMBER_CNT AS S_EDU_TOTAL,
	FBI.FAM_MEMBER_CNT AS S_MEDICAL_SECURITY_TOTAL,
	FBI.MEDICAL_MEMBER_CNT AS S_MEDICAL_SECURITY_ACHIEVED,
	NVL (FBI.IF_HOUSE_DANGER, 2) AS S_IS_DANGER_HOUSE,
	CASE
			WHEN HOUSE_SCORE >= 100 THEN
				1
			ELSE
				0
			END AS S_HAS_HOUSE_BECOME_SAFE,
			 NVL(FBI.HOUSE_DANGER_LVL,'-') AS S_HOUSE_DANGER_LEVEL,
			 NVL (ROUND(FAT.TOTAL_SCORE, 2), 0) AS S_INDEX_,
			 CASE
			WHEN FAT.TOTAL_SCORE >= 100 THEN
				1
			ELSE
				0
			END AS S_HAS_ACHIEVED,
			AID_TIME,
      		ABNORMAL_DESC,
      		ABNORMAL_TIME
			
			FROM
			F_FAMILYFILE_BASIC_INFO_D FBI
			LEFT JOIN F_FAMILYFILE_AID_TRAIL_D FAT 
			ON FAT.FAM_ID = FBI.FAM_ID
			WHERE FBI.FAM_ID=#{FAM_ID}
			AND FAT.STAT_TIME =#{F_FAMILYFILE_AID_TRAIL_D}
	
	</select>
<!--户档案基本信息-->
	<select id="queryFamilyFileBasicData"  parameterType="hashmap" resultType="FamilyFileBasicData">
			SELECT
			FBI.FAM_ID AS S_FAM_ID,
	FBI.FAM_NAME AS houseHolderName1,
	(
		SELECT
			PATH
		FROM
			TR_PIC_FAMILY_D
		WHERE
			PIC_TYPE = 3
		AND ROWNUM = 1
		AND FILE_TIME =#{TR_PIC_FAMILY_D}
		AND RESIDENCE_ID = FBI.FAM_ID
	) AS houseHolderAvatar1,
	FBI.FAM_TEL AS houseHolderPhone1,
	FBI.POOR_PROPERTY_DESC AS poorAttribute1,
	FBI.MAIN_POOR_REASON AS poorReason1,
	CONCAT (FBI.INCOME, '元') AS startIncome1,
	NVL(FBI.TEAM_LEADER,'-') AS countryLeaderName1,
	NVL(FBI.TEAM_LEADER_TEL,'-') AS countryLeaderPhone1,
	NVL(FBI.HELP_BEGIN_TIME ,'-')AS countryLeaderStartTime1,
(
		SELECT
			PATH
		FROM
			TR_PIC_HELP_CADRE_D
		WHERE
			PERSON_ID = FBI.TEAM_LEADER_ID
		AND FILE_TIME =#{TR_PIC_HELP_CADRE_D}
	) AS countryLeaderAvatar1,
	NVL(FBI.HELP_UNIT_NAME,'-') AS countryLeaderOrg1,
	NVL (FBI.REAL_EDU_MEMBER_CNT, 0) AS S_EDU,
	TRUNC (MEDICAL * 100, 1) AS S_MEDICAL_SECURITY,
	FBI.DPI AS income1,
	FBI.REAL_EDU_MEMBER_CNT AS eduTotal1,
	FBI.NEED_EDU_MEMBER_CNT AS eduAchieved1,
	FBI.FAM_MEMBER_CNT AS medicalSecurityTotal1,
	FBI.MEDICAL_MEMBER_CNT AS medicalSecurityAchieved1,
	NVL (FBI.IF_HOUSE_DANGER, 2) AS isDangerHouse1,
	CASE
			WHEN HOUSE_SCORE >= 100 THEN
				1
			ELSE
				0
			END AS hasHouseBecomeSafe1,
			 NVL(FBI.HOUSE_DANGER_LVL,'-') AS houseDangerLevel1,
			 NVL (ROUND(FAT.TOTAL_SCORE, 2), 0) AS index1,
			 CASE
			WHEN FAT.TOTAL_SCORE >= 100 THEN
				1
			ELSE
				0
			END AS hasAchieved1
			
			
			FROM
			F_FAMILYFILE_BASIC_INFO_D FBI
			LEFT JOIN F_FAMILYFILE_AID_TRAIL_D FAT 
			ON FAT.FAM_ID = FBI.FAM_ID
			WHERE FBI.FAM_ID=#{FAM_ID}
			AND FAT.STAT_TIME =#{F_FAMILYFILE_AID_TRAIL_D}
	</select>
	<!--生活条件-->
	<select id="queryFamilyFileConditionData"  parameterType="hashmap" resultType="FamilyFileConditionData">
SELECT
			FBI.FAM_ID AS S_FAM_ID,
			FBI.PLANTATION_AREA AS total,
			FBI.VALID_PLANTATION_AREA AS available1,
			FBI.FOREAST_AREA AS total1,
			FBI.BACK_FOREAST_AREA AS return1,
			FBI.FRUIT_AREA AS fruit,
			FBI.GRASSLAND_AREA AS grassTotal,
			FBI.WATER_AREA AS waterTotal,
			FBI.HAVE_ELEC AS productionElectricity,
			FBI.HAVE_PRODUCT_ELEC AS livingElectricity,
			FBI.DRINK_SAFETY AS waterSafety,
			FBI.HOUSE_AREA AS houseArea,
			FBI.MAIN_ROAD_DIS AS distanceMainRoad,
			FBI.HOUSE_ROAD_KIND AS roadType,
			FBI.MAIN_FUEL AS fuelType,
			FBI.HAVE_WC AS toilet,
			FBI.JOIN_FARMER_COP AS joinedFsc
			FROM
			F_FAMILYFILE_BASIC_INFO_D FBI
			WHERE  FBI.FAM_ID=#{FAM_ID}
	</select>
	<!--帮扶策划汇总-->
	<select id="queryCountryFileImplementData"  parameterType="hashmap" resultType="CountryFileImpBase">
		
		SELECT
		COUNT(PROJ_ID)  AS S_TOTAL,
		(SELECT COUNT(1) FROM F_FAMILYFILE_HELP_METHOD_D WHERE PROJ_STATUS ='完成' AND  FAM_ID=A.FAM_ID) S_COMPLETED,
		(SELECT COUNT(1) FROM F_FAMILYFILE_HELP_METHOD_D WHERE PROJ_STATUS ='进行中' AND  FAM_ID=A.FAM_ID) S_RUNNING,
		ROUND(SUM(REAL_CAPITAL)/10000,2) AS S_INVESTED,
		case when SUM(PROJ_PROFIT) =0 then 0
		else ROUND(SUM(PROJ_PROFIT)/10000,2) end  S_PROFIT, 
		ROUND(SUM(PLAN_CAPITAL)/10000,2) S_INVEST_EXPECTED
		FROM
		F_FAMILYFILE_HELP_METHOD_D A
		WHERE FAM_ID=#{FAM_ID}
		GROUP BY FAM_ID
	</select>
	
	<!--数据轨迹创建-->
	<select id="queryFamilyFileDataPath"  parameterType="hashmap" resultType="hashmap">
		select MOD_TYPE,
        MOD_TIME,
        MOD_CONTENT,
        VAL_BEFORE,
        VAL_AFTER,
        UPDATER_NAME,
        UPDATER_AREA_NAME,
        POP_NAME
        from F_FAMILYFILE_DATA_TRACK_D
        where fam_id=#{FAM_ID} 
        and (mod_year &lt; #{YEAR} or mod_year=#{YEAR}) 
        order by MOD_TYPE, mod_time desc
	</select>
</mapper>